## 1A ##

Costo O(n)

## 1B ##

[-9,8]

## 1C ##

pulbic int[] minAndMax(int[] a){
	int[] result = new int[2];
	result[0] = result [1] = a[0];
	for(int i = 1; i< a.lenght() ; i++){
		if(a[i] <  result[0])
			result[0] = a[i]
		else if(a[i] >  result[1])
			result[1] = a[i]
	}
	return result;

}

## 2 ##
	
	public class BinaryNode{
		private int k;
		private BinaryNode left;
		private BinaryNode right;
		
		public BinaryNode(){ k = 0;}
		public int getKey();
		public void setKey(int k);
		public void setLeft(BinaryNode n);
		public void setRight(BinaryNode n);
		public void BinaryNode getLeft();
		public void BinaryNode getRight();
		
	}
	
	public class BinTree{
		private BinaryNode root;
		
		public BinTree(BinaryNode r);
		public int size();
		public boolean isEmpty();
		public ListIterator<BinaryNode> entries();
		public insert(BinaryNode b);
		public remove(BinaryNode b);
		public void fromRoot(){
			fromRoot(root,0);
		}
		private void fromRoot(BinaryNode r, int n){
			if(r == null) return;
			r.setKey(n);
			n++;
			fromRoot(r.getLeft(),n);
			fromRoot(r.getRight(),n);
		}	
		
		public void toFurthestLeaf(){
			auxToLeaf(root, 0);
		}
		public int auxToLeaf(BinaryNode r){
			int d = 0;
			if(r == null) return d;
			int leftDeep = auxToLeaf(r.getLeft());
			int rightDeep = auxToLeaf(r.getRight());
			if(leftDeep > rightDeep)
				d = leftDeep;
			else
				d = rightDeep;
			r.setKey(d);
			return d+1;
		}
	}

## 3 ##

Ogni Grafo memorizza una mappa dove le chiavi sono i vertici e i valori sono le liste di lati incidenti a quel nodo. I Vertici mantengono un campo boolean "isVisited" mentre i lati mantengono un campo enum Status{DISCOVERY,BACK,ALREADY}. Si ipotizzi che inzialmente tutti i campi Status stiano a null e i boolean stiano a false

public int quanteConnesseUnion(Graph g1, Graph g2){
	int cont = 0;
	Collection<Vertex> vertices = g1.getVertices(); //gli stessi di g2
	for(Vertex v: vertices){
		if(v.isVisited() == false){
			cont++;
			dfs(v,g1,g2);
		}
	}
	return cont;
}

public void dfsUnion(Vertex v,Graph g1, Graph g2){
	v.setVisited(true);
	for(Edges e: g1.getEdges(v)){
		if(e.getStatus() == null){
			Vertex opposite = e.getOpposite(v);
			if(opposite.isVisited())
				e.setStatus(Status.BACK);
			else{
				e.setStatus(Status.DISCOVERY);
				dfs(opposite,g1,g2);
			}
		}
	}
	//stessa cosa per g2
	for(Edges e: g2.getEdges(v)){
		if(e.getStatus() == null){
			Vertex opposite = e.getOpposite(v);
			if(opposite.isVisited())
				e.setStatus(Status.BACK);
			else{
				e.setStatus(Status.DISCOVERY);
				dfs(opposite,g1,g2);
			}
		}
	}
	
}

public int quanteConnesseIntersection(Graph g1, Graph g2){
	int cont = 0;
	Collection<Vertex> vertices = g1.getVertices(); //gli stessi di g2
	for(Vertex v: vertices){
		if(v.isVisited() == false){
			cont++;
			dfs(v,g1,g2);
		}
	}
	return cont;
}

public void dfsIntersection(Vertex v,Graph g1, Graph g2){
	v.setVisited(true);
	for(Edges e: g1.getEdges(v)){
		if(e.getStatus() == null){
			e.setStatus(Status.ALREADY);
		}
	}
	//stessa cosa per g2
	for(Edges e: g2.getEdges(v)){
		if(e.getStatus() == Status.ALREADY){
			Vertex opposite = e.getOpposite(v);
			if(opposite.isVisited())
				e.setStatus(Status.BACK);
			else{
				e.setStatus(Status.DISCOVERY);
				dfs(opposite,g1,g2);
			}
		}
	}
	
}
