## 1A ##
Il metodo aaa(x,i) chiama ricorsivamente se stesso n-i volte, dove n é x.lenght . Quindi nel caso peggiore in cui i sia 0 allora sono esattamente n volte. Il metodo aaa() ad ogni sua invocazione chiama anche bbb(y,x,i) che costa O(n). quindi il costo totale del caso peggiore risulta essere n + n(n-1)/2 , quindi O(n²)

## 1B ##
Il caso migliore si presenta quando x é giá ordinato. In questo caso il costo di bbb passa a costante O(1). Quindi il costo totale del caso migliore risulta essere O(n);


## 1C ##
Viene ordinato

{-2,-1,3,4,5}

## 2A ##

pulic class Node<K,V>{
	private K key;
	private V value;
	private Node<K,V> left;
	private Node<K,V> right;
	
	public Node(K key, V value);
	
	public K getKey();
	public V getValue();
	public Node<K,V> getLeft();
	public Node<K,V> getRight();
	public Node<K,V> setLeft();
	public Node<K,V> setRight();
}

public class BST<K,V>{
	private Node<K,V> root;
	private int nodes;
	
	public BST(Node<K,V> root);
	
	public Node<K,V> getRoot();
	public int size();
	public boolean isEmpty();
	public Iterator<Node<K,V>> iterator;
	
	public Node<K,V> find(K key);
	public List<Node<K,V>> findAll(K key);
	public void insert(K key, V value);
	public Node<K,V> remove(K key)
	public List<Node<K,V>> removeAll(K key);
	
	
	//utili
	public boolean hasLeft(Node<K,V> n);
	public boolean hasRight(Node<K,V> n);
	public boolean isInternal(Node<K,V> n);
	public boolean isRoot(Node<K,V> n);
	
}

## 2B ##

////Ricorsivo

public Node<K,V> find(K key){
	return find(root, key);
}	

private Node<K,V> find(Node<K,V> node, K key){
	if(node == null) return null;
		if(key.compareTo(node.key) > 0) return find( node.getRight() , key);
		
		if(key.compareTo(node.key) < 0) return find( node.getLeft() , key)
		 
		return node.getValue();
	}
}	

////Iterativo

public Node<K,V> find(K key){
	
	Node<K,V> node = root;
		
	while(node != null ){
		if( node.getKey().compareTo(key) > 0){
			node = node.getLeft();
		}else if node.getKey().compareTo(key) < 0{
			node = node.getRight();
		}else {
			return node;
		}
	}
	return null; 
}



## 2C ##
/////ricorsivo

private Node<K,V> findMin(Node<K,V> x){
	if( x.left == null) return x;
	return findMin(x.left);
}

private Node<K,V> removeMin(Node<K,V> x){
	if( x.left == null ) return x.right;
	x.left = removeMin(x.left);
	return x;
}

public void remove(K key){
	root = remove(root, key);
}

private Node<V> remove(Node<K,V> x, K key){
	if(x == null ) return null;
	if( key.compareTo(x.getKey()) > 0) x.right = remove(x.right,key);
	else if (key.compareTo(x.getKey()) < 0) x.left = remove(x.left,key);
	else{
		if(x.right == null ) return x.left;
		if(x.left == null ) return x.right;
		Node<K,V> temp = x;
		x = findMin(temp.right);
		x.right = removeMin(temp.right);
		x.left = temp.left;	
	}
	return x;
}


## 3A ##

	I grafi diretti possono essere rappresentati mediante:
	
	- ¨La lista dei lati¨ é una possibile rapprensetazione dei digrafi. Si memorizzano due liste, una contenente i vertici ed una contenente i lati orientati. Ogni Vertice punta all´elemento che rappresenta, e ogni lato ha due riferimenti rispettivamente al vertice da cui parte e al vertice a cui arriva. I metodi incidentInEdges(V), incidentOutEdges(V) e areAdjacent(v1,v2) con questa implementazione sono relativamente costosi (devo scandire tutta la lista dei lati)
	
	- ¨La lista delle adiacenze¨ é un´altra possibile rappresentazione. Rispetto alla struttura precedente, ogni vertice punta a due liste di adiacenza una per i lati entranti e l´altra per i lati uscenti. Ogni lato ha un riferimento ai nodi che rappresentano se stesso nelle varie liste.Con questa implementazioni si migliorano di molto i costi di incidentEdges() e areAdjacent() infatti invece di scandire tutta la lista dei nodi, basta scandire una/due liste delle adiacenze.
	
	- ¨La matrice delle adiacenze¨ usa una matrice per rappresentare i collegamenti tra i vertici, questa implementazione richiede uno spazio pari a n² dove n é il numero di vertici, ogni casella [i,j] punta ad un lato che va dal vertice V_i al vertice V_j se questo collegamento effettivamente esiste(altrimenti settato a null). Con questa implementazione i costi di areAdjacent() diventano costanti, di contro i costi di insertVertex() e removeVertex si alzano di molto. Infatti per poter aggiungere/rimuovere un vertice bisogna ricostruire tutta la matrice delle adiacenze ( O(n²) )
	
## 3B ##

In tutte le strutture dati presentate al punto precedente si mantengono tutti i nodi del grafo in una qualche struttura (solitamente lista collegata). Quindi per sapere se due nodi appartengono allo stesso grafo basta scandire la lista dei nodi e verificare che vi siano entrambi.

## 3C ##
	
Se i due nodi si trovano nello stesso grafo, si inserisce semplicemente il nuovo lato in tale grafo.

Se i due nodi non si trovano nello stesso grafo, devo unire i due grafi, inserendo tutti i nodi e i lati del grafo piu' piccolo in quello di dimensioni maggiori
	

	


